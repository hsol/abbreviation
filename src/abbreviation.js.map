{"version":3,"sources":["abbreviation.es6"],"names":["Abbreviation","option","_config","Object","assign","upper","tags","class","item","Array","set","Error","letters","abbr","join","split","exportWithSentence","sentence","getAbbreviationFromText","HTMLElement","getAbbreviationFromDOM","_abbreviation","export","filter","letter","test","dom","cloneNode","querySelectorAll","forEach","script","parentNode","removeChild","originalSentence","textContent","innerText","replace","condition","concat","map","elements","length","from","seperator","String","fromCharCode","unicodeTempStorage","element","toUpperCase","push","cursor","text"],"mappings":"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","file":"abbreviation.js","sourcesContent":["class Abbreviation {\n  constructor(option) {\n    this._config = Object.assign({\n      upper: true,\n      tags: ['strong'],\n      class: ['abbr']\n    }, option);\n  }\n\n  _abbreviation(item) {\n    return new class {\n      constructor(item) {\n        if (item instanceof Array || typeof item === 'string') {\n          this.set(item)\n        } else if (typeof item !== 'undefined') {\n          throw new Error('parameter must be an Array or String or DOM.');\n        }\n      }\n\n      set(item) {\n        if (item instanceof Array) {\n          this.letters = item;\n          this.abbr = item.join('');\n        } else if (typeof item === 'string') {\n          this.letters = item.split('');\n          this.abbr = item;\n        } else {\n          throw new Error('parameter must be an Array or String.');\n        }\n        return this;\n      }\n\n      export() {\n        return this.exportWithSentence();\n      }\n\n      exportWithSentence(sentence) {\n        return {\n          sentence: sentence || '',\n          letters: this.letters || [],\n          abbr: this.abbr || ''\n        }\n      }\n    }(item);\n  }\n\n  from(item) {\n    if (typeof item === 'string') {\n      return this.getAbbreviationFromText(item);\n    } else if (item instanceof HTMLElement) {\n      return this.getAbbreviationFromDOM(item);\n    } else {\n      throw new Error('parameter must be an DOM or String.');\n    }\n  }\n\n  getAbbreviationFromText(sentence) {\n    if (!this._config.upper) {\n      return this._abbreviation().export();\n    }\n    let letters = sentence.split('').filter((letter) => {\n      return /[A-Z]/.test(letter);\n    });\n    return (new this._abbreviation(letters)).exportWithSentence(sentence);\n  }\n\n  getAbbreviationFromDOM(dom) {\n    dom = dom.cloneNode(true);\n    dom.querySelectorAll('script').forEach((script) => {\n      script.parentNode.removeChild(script);\n    });\n    let originalSentence = (dom.textContent || dom.innerText).replace(/(\\r\\n|\\n|\\r)/gm, '');\n    let condition = (this._config.tags || []).concat((this._config.class || []).map((item) => {\n        return '.' + item;\n      }\n    ));\n\n    let letters = [];\n    let elements = condition.length > 0 ? Array.from(dom.querySelectorAll(condition.join(','))) : [];\n    if (this._config.upper) {\n      const seperator = String.fromCharCode(1114112);\n      let unicodeTempStorage = [];\n      elements.forEach((element) => {\n        element.innerText = element.innerText.toUpperCase();\n\n        if (!(/[A-Z]/.test(element.innerText))) {\n          unicodeTempStorage.push(element.innerText);\n          element.innerText = seperator;\n        }\n      });\n\n      let cursor = 0;\n      let sentence = (dom.textContent || dom.innerText).replace(/(\\r\\n|\\n|\\r)/gm, '');\n      letters = sentence.split('').map((letter) => {\n        if (letter === seperator) {\n          return unicodeTempStorage[cursor++];\n        }\n\n        if (/[A-Z]/.test(letter)) {\n          return letter;\n        }\n\n        return null;\n      }).filter((item) => {\n        return item !== null;\n      });\n    } else {\n      letters = elements.map((element) => {\n        let text = element.innerText;\n        if (text.length === 1) {\n          return text;\n        }\n      }).filter((item) => {\n        return item !== null;\n      });\n    }\n    return (new this._abbreviation(letters)).exportWithSentence(originalSentence);\n  }\n}"]}